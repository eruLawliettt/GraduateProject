// <auto-generated />
using System;
using GraduateProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraduateProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.CertificationForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_CertificationForms_Id");

                    b.ToTable("CertificationForms", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Cycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Cycles_Id");

                    b.ToTable("Cycles", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Disciplines_Id");

                    b.ToTable("Disciplines", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_Plans_Id");

                    b.HasIndex("GroupId")
                        .IsUnique()
                        .HasFilter("[GroupId] IS NOT NULL");

                    b.ToTable("Plans", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.PlanCycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_PlanCycles_Id");

                    b.HasIndex("CycleId");

                    b.HasIndex("PlanId", "CycleId")
                        .IsUnique();

                    b.ToTable("PlanCycles", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.PlanCycleDiscipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CertificationHours")
                        .HasColumnType("int");

                    b.Property<Guid>("DisciplineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanCycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfessionalModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_PlanCycleDisciplines_Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("ProfessionalModuleId");

                    b.HasIndex("PlanCycleId", "DisciplineId")
                        .IsUnique();

                    b.ToTable("PlanCycleDisciplines", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.PlanCycleDisciplineSemester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CertificationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlanCycleDisciplineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PracticalHours")
                        .HasColumnType("int");

                    b.Property<Guid>("SemesterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TheoreticalHours")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_PlanCycleDisciplineSemesters_Id");

                    b.HasIndex("CertificationFormId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("PlanCycleDisciplineId", "SemesterId")
                        .IsUnique();

                    b.ToTable("PlanCycleDisciplineSemesters", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.ProfessionalModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CertificationFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CertificationHours")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_ProfessionalModules_Id");

                    b.HasIndex("CertificationFormId");

                    b.ToTable("ProfessionalModules", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK_Semesters_Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Semesters", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.StudyDirection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_StudyDirections_Id");

                    b.ToTable("StudyDirections", "curriculum");
                });

            modelBuilder.Entity("GraduateProject.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudyDirectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudyDirectionId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("GraduateProject.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("GraduateProject.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Plan", b =>
                {
                    b.HasOne("GraduateProject.Entities.Group", "Group")
                        .WithOne("Plan")
                        .HasForeignKey("GraduateProject.Entities.Curriculum.Plan", "GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("PK_Plans_GroupId_Groups_Id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.PlanCycle", b =>
                {
                    b.HasOne("GraduateProject.Entities.Curriculum.Cycle", "Cycle")
                        .WithMany("PlanCycles")
                        .HasForeignKey("CycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PlanCycles_CycleId_Cycles_Id");

                    b.HasOne("GraduateProject.Entities.Curriculum.Plan", "Plan")
                        .WithMany("PlanCycles")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PlanCycles_PlanId_Plans_Id");

                    b.Navigation("Cycle");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.PlanCycleDiscipline", b =>
                {
                    b.HasOne("GraduateProject.Entities.Curriculum.Discipline", "Discipline")
                        .WithMany("PlanCycleDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PlanCycleDiscipline_DisciplineId_Disciplines_Id");

                    b.HasOne("GraduateProject.Entities.Curriculum.PlanCycle", "PlanCycle")
                        .WithMany("PlanCycleDisciplines")
                        .HasForeignKey("PlanCycleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PlanCycleDiscipline_PlanCycleId_PlanCycles_Id");

                    b.HasOne("GraduateProject.Entities.Curriculum.ProfessionalModule", "ProfessionalModule")
                        .WithMany("PlanCycleDisciplines")
                        .HasForeignKey("ProfessionalModuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PlanCycleDiscipline_ProfessionalModuleId_ProfessionalModules_Id");

                    b.Navigation("Discipline");

                    b.Navigation("PlanCycle");

                    b.Navigation("ProfessionalModule");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.PlanCycleDisciplineSemester", b =>
                {
                    b.HasOne("GraduateProject.Entities.Curriculum.CertificationForm", "CertificationForm")
                        .WithMany("PlanCycleDisciplineSemesters")
                        .HasForeignKey("CertificationFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PlanCycleDisciplineSemesters_CertificationFormId_CertificationForms_Id");

                    b.HasOne("GraduateProject.Entities.Curriculum.PlanCycleDiscipline", "PlanCycleDiscipline")
                        .WithMany("PlanCycleDisciplineSemesters")
                        .HasForeignKey("PlanCycleDisciplineId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PlanCycleDisciplineSemesters_PlanCycleDisciplineId_PlanCycleDisciplines_Id");

                    b.HasOne("GraduateProject.Entities.Curriculum.Semester", "Semester")
                        .WithMany("PlanCycleDisciplineSemesters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_PlanCycleDisciplineSemesters_SemesterId_Semesters_Id");

                    b.Navigation("CertificationForm");

                    b.Navigation("PlanCycleDiscipline");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.ProfessionalModule", b =>
                {
                    b.HasOne("GraduateProject.Entities.Curriculum.CertificationForm", "CertificationForm")
                        .WithMany("ProfessionalModules")
                        .HasForeignKey("CertificationFormId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_ProfessionalModules_CertificationFormId_CertificationForms_Id");

                    b.Navigation("CertificationForm");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Semester", b =>
                {
                    b.HasOne("GraduateProject.Entities.Curriculum.Plan", "Plan")
                        .WithMany("Semesters")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Semesters_PlanId_Plan_Id");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("GraduateProject.Entities.Group", b =>
                {
                    b.HasOne("GraduateProject.Entities.Curriculum.StudyDirection", "StudyDirection")
                        .WithMany("Groups")
                        .HasForeignKey("StudyDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyDirection");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("GraduateProject.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GraduateProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GraduateProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("GraduateProject.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraduateProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GraduateProject.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.CertificationForm", b =>
                {
                    b.Navigation("PlanCycleDisciplineSemesters");

                    b.Navigation("ProfessionalModules");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Cycle", b =>
                {
                    b.Navigation("PlanCycles");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Discipline", b =>
                {
                    b.Navigation("PlanCycleDisciplines");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Plan", b =>
                {
                    b.Navigation("PlanCycles");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.PlanCycle", b =>
                {
                    b.Navigation("PlanCycleDisciplines");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.PlanCycleDiscipline", b =>
                {
                    b.Navigation("PlanCycleDisciplineSemesters");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.ProfessionalModule", b =>
                {
                    b.Navigation("PlanCycleDisciplines");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.Semester", b =>
                {
                    b.Navigation("PlanCycleDisciplineSemesters");
                });

            modelBuilder.Entity("GraduateProject.Entities.Curriculum.StudyDirection", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("GraduateProject.Entities.Group", b =>
                {
                    b.Navigation("Plan");
                });
#pragma warning restore 612, 618
        }
    }
}
